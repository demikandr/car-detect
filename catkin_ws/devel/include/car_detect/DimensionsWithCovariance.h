// Generated by gencpp from file car_detect/DimensionsWithCovariance.msg
// DO NOT EDIT!


#ifndef CAR_DETECT_MESSAGE_DIMENSIONSWITHCOVARIANCE_H
#define CAR_DETECT_MESSAGE_DIMENSIONSWITHCOVARIANCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace car_detect
{
template <class ContainerAllocator>
struct DimensionsWithCovariance_
{
  typedef DimensionsWithCovariance_<ContainerAllocator> Type;

  DimensionsWithCovariance_()
    : dimensions()
    , covariance()  {
      covariance.assign(0.0);
  }
  DimensionsWithCovariance_(const ContainerAllocator& _alloc)
    : dimensions(_alloc)
    , covariance()  {
  (void)_alloc;
      covariance.assign(0.0);
  }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dimensions_type;
  _dimensions_type dimensions;

   typedef boost::array<double, 9>  _covariance_type;
  _covariance_type covariance;




  typedef boost::shared_ptr< ::car_detect::DimensionsWithCovariance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_detect::DimensionsWithCovariance_<ContainerAllocator> const> ConstPtr;

}; // struct DimensionsWithCovariance_

typedef ::car_detect::DimensionsWithCovariance_<std::allocator<void> > DimensionsWithCovariance;

typedef boost::shared_ptr< ::car_detect::DimensionsWithCovariance > DimensionsWithCovariancePtr;
typedef boost::shared_ptr< ::car_detect::DimensionsWithCovariance const> DimensionsWithCovarianceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_detect::DimensionsWithCovariance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_detect::DimensionsWithCovariance_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace car_detect

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/lunar/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg'], 'car_detect': ['/home/demikandr/SideProjects/car-detect/catkin_ws/src/car_detect/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::car_detect::DimensionsWithCovariance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_detect::DimensionsWithCovariance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_detect::DimensionsWithCovariance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_detect::DimensionsWithCovariance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_detect::DimensionsWithCovariance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_detect::DimensionsWithCovariance_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_detect::DimensionsWithCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f47d667774dd07bc75421f9c0a4886e7";
  }

  static const char* value(const ::car_detect::DimensionsWithCovariance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf47d667774dd07bcULL;
  static const uint64_t static_value2 = 0x75421f9c0a4886e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_detect::DimensionsWithCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_detect/DimensionsWithCovariance";
  }

  static const char* value(const ::car_detect::DimensionsWithCovariance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_detect::DimensionsWithCovariance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3            dimensions     # sizes of the bounding box\n\
float64[9] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::car_detect::DimensionsWithCovariance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_detect::DimensionsWithCovariance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dimensions);
      stream.next(m.covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DimensionsWithCovariance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_detect::DimensionsWithCovariance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_detect::DimensionsWithCovariance_<ContainerAllocator>& v)
  {
    s << indent << "dimensions: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dimensions);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_DETECT_MESSAGE_DIMENSIONSWITHCOVARIANCE_H
